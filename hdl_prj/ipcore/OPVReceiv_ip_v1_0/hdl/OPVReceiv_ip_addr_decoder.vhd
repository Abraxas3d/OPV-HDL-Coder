-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/opv_receiver_HDL_coder_input/OPVReceiv_ip_addr_decoder.vhd
-- Created: 2024-02-14 00:33:08
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: OPVReceiv_ip_addr_decoder
-- Source Path: OPVReceiv_ip/OPVReceiv_ip_axi4/OPVReceiv_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY OPVReceiv_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_audio_or_data                :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_received_i                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16
        write_received_q                  :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16
        );
END OPVReceiv_ip_addr_decoder;


ARCHITECTURE rtl OF OPVReceiv_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL read_audio_or_data_signed        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL decode_sel_audio_or_data_1_1     : std_logic;  -- ufix1
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_audio_or_data           : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_slice_audio_or_data_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_audio_or_data_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_received_i_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_received_i_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_received_i               : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_reg_received_i_1_1          : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL decode_sel_received_q_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_received_q_1_1           : std_logic;  -- ufix1
  SIGNAL data_in_received_q               : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL data_reg_received_q_1_1          : signed(15 DOWNTO 0);  -- sfix16

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1_1 <= '1';

  enb <= const_1_1;

  read_audio_or_data_signed <= signed(read_audio_or_data);

  
  decode_sel_audio_or_data_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_ip_timestamp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_ip_timestamp <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_audio_or_data_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_audio_or_data <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_audio_or_data <= read_audio_or_data_signed;
      END IF;
    END IF;
  END PROCESS reg_audio_or_data_process;


  data_slice_audio_or_data_1 <= unsigned(resize(read_reg_audio_or_data, 32));

  
  decode_rd_audio_or_data_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_audio_or_data_1_1 = '0' ELSE
      data_slice_audio_or_data_1;

  data_read <= std_logic_vector(decode_rd_audio_or_data_1_1);

  
  decode_sel_received_i_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_received_i_1_1 <= decode_sel_received_i_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_received_i <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_received_i_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_received_i_1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_received_i_1_1 = '1' THEN
        data_reg_received_i_1_1 <= data_in_received_i;
      END IF;
    END IF;
  END PROCESS reg_received_i_1_1_process;


  write_received_i <= std_logic_vector(data_reg_received_i_1_1);

  
  decode_sel_received_q_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_enb_received_q_1_1 <= decode_sel_received_q_1_1 AND wr_enb;

  data_in_received_q <= signed(data_write_unsigned(15 DOWNTO 0));

  reg_received_q_1_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_reg_received_q_1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_received_q_1_1 = '1' THEN
        data_reg_received_q_1_1 <= data_in_received_q;
      END IF;
    END IF;
  END PROCESS reg_received_q_1_1_process;


  write_received_q <= std_logic_vector(data_reg_received_q_1_1);

END rtl;

